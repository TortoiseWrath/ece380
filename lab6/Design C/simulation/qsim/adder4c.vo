// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 16.0.0 Build 211 04/27/2016 SJ Standard Edition"

// DATE "10/11/2016 19:10:52"

// 
// Device: Altera 5CSEMA5F31C6 Package FBGA896
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module adder4c (
	A,
	B,
	S,
	Cout);
input 	[3:0] A;
input 	[3:0] B;
output 	[3:0] S;
output 	Cout;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \S[0]~output_o ;
wire \S[1]~output_o ;
wire \S[2]~output_o ;
wire \S[3]~output_o ;
wire \Cout~output_o ;
wire \A[0]~input_o ;
wire \B[0]~input_o ;
wire \A[1]~input_o ;
wire \B[1]~input_o ;
wire \S~0_combout ;
wire \A[2]~input_o ;
wire \B[2]~input_o ;
wire \S~1_combout ;
wire \A[3]~input_o ;
wire \B[3]~input_o ;
wire \C~0_combout ;
wire \S~2_combout ;
wire \C~1_combout ;
wire \Cout~0_combout ;
wire [3:0] P;


cyclonev_io_obuf \S[0]~output (
	.i(P[0]),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \S[0]~output .bus_hold = "false";
defparam \S[0]~output .open_drain_output = "false";
defparam \S[0]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \S[1]~output (
	.i(\S~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \S[1]~output .bus_hold = "false";
defparam \S[1]~output .open_drain_output = "false";
defparam \S[1]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \S[2]~output (
	.i(\S~1_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \S[2]~output .bus_hold = "false";
defparam \S[2]~output .open_drain_output = "false";
defparam \S[2]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \S[3]~output (
	.i(\S~2_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \S[3]~output .bus_hold = "false";
defparam \S[3]~output .open_drain_output = "false";
defparam \S[3]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \Cout~output (
	.i(\Cout~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Cout~output_o ),
	.obar());
// synopsys translate_off
defparam \Cout~output .bus_hold = "false";
defparam \Cout~output .open_drain_output = "false";
defparam \Cout~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \A[0]~input (
	.i(A[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\A[0]~input_o ));
// synopsys translate_off
defparam \A[0]~input .bus_hold = "false";
defparam \A[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \B[0]~input (
	.i(B[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\B[0]~input_o ));
// synopsys translate_off
defparam \B[0]~input .bus_hold = "false";
defparam \B[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \P[0] (
// Equation(s):
// P[0] = !\A[0]~input_o  $ (!\B[0]~input_o )

	.dataa(!\A[0]~input_o ),
	.datab(!\B[0]~input_o ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(P[0]),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \P[0] .extended_lut = "off";
defparam \P[0] .lut_mask = 64'h6666666666666666;
defparam \P[0] .shared_arith = "off";
// synopsys translate_on

cyclonev_io_ibuf \A[1]~input (
	.i(A[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\A[1]~input_o ));
// synopsys translate_off
defparam \A[1]~input .bus_hold = "false";
defparam \A[1]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \B[1]~input (
	.i(B[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\B[1]~input_o ));
// synopsys translate_off
defparam \B[1]~input .bus_hold = "false";
defparam \B[1]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \S~0 (
// Equation(s):
// \S~0_combout  = !\A[1]~input_o  $ (!\B[1]~input_o  $ (((\A[0]~input_o  & \B[0]~input_o ))))

	.dataa(!\A[0]~input_o ),
	.datab(!\B[0]~input_o ),
	.datac(!\A[1]~input_o ),
	.datad(!\B[1]~input_o ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\S~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \S~0 .extended_lut = "off";
defparam \S~0 .lut_mask = 64'h1EE11EE11EE11EE1;
defparam \S~0 .shared_arith = "off";
// synopsys translate_on

cyclonev_io_ibuf \A[2]~input (
	.i(A[2]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\A[2]~input_o ));
// synopsys translate_off
defparam \A[2]~input .bus_hold = "false";
defparam \A[2]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \B[2]~input (
	.i(B[2]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\B[2]~input_o ));
// synopsys translate_off
defparam \B[2]~input .bus_hold = "false";
defparam \B[2]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \S~1 (
// Equation(s):
// \S~1_combout  = ( \A[2]~input_o  & ( \B[2]~input_o  & ( (!\A[1]~input_o  & (\A[0]~input_o  & (\B[0]~input_o  & \B[1]~input_o ))) # (\A[1]~input_o  & (((\A[0]~input_o  & \B[0]~input_o )) # (\B[1]~input_o ))) ) ) ) # ( !\A[2]~input_o  & ( \B[2]~input_o  & ( 
// (!\A[1]~input_o  & ((!\A[0]~input_o ) # ((!\B[0]~input_o ) # (!\B[1]~input_o )))) # (\A[1]~input_o  & (!\B[1]~input_o  & ((!\A[0]~input_o ) # (!\B[0]~input_o )))) ) ) ) # ( \A[2]~input_o  & ( !\B[2]~input_o  & ( (!\A[1]~input_o  & ((!\A[0]~input_o ) # 
// ((!\B[0]~input_o ) # (!\B[1]~input_o )))) # (\A[1]~input_o  & (!\B[1]~input_o  & ((!\A[0]~input_o ) # (!\B[0]~input_o )))) ) ) ) # ( !\A[2]~input_o  & ( !\B[2]~input_o  & ( (!\A[1]~input_o  & (\A[0]~input_o  & (\B[0]~input_o  & \B[1]~input_o ))) # 
// (\A[1]~input_o  & (((\A[0]~input_o  & \B[0]~input_o )) # (\B[1]~input_o ))) ) ) )

	.dataa(!\A[0]~input_o ),
	.datab(!\B[0]~input_o ),
	.datac(!\A[1]~input_o ),
	.datad(!\B[1]~input_o ),
	.datae(!\A[2]~input_o ),
	.dataf(!\B[2]~input_o ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\S~1_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \S~1 .extended_lut = "off";
defparam \S~1 .lut_mask = 64'h011FFEE0FEE0011F;
defparam \S~1 .shared_arith = "off";
// synopsys translate_on

cyclonev_io_ibuf \A[3]~input (
	.i(A[3]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\A[3]~input_o ));
// synopsys translate_off
defparam \A[3]~input .bus_hold = "false";
defparam \A[3]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \B[3]~input (
	.i(B[3]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\B[3]~input_o ));
// synopsys translate_off
defparam \B[3]~input .bus_hold = "false";
defparam \B[3]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \C~0 (
// Equation(s):
// \C~0_combout  = ( \A[2]~input_o  & ( \B[2]~input_o  ) ) # ( !\A[2]~input_o  & ( \B[2]~input_o  & ( (!\A[1]~input_o  & (\A[0]~input_o  & (\B[0]~input_o  & \B[1]~input_o ))) # (\A[1]~input_o  & (((\A[0]~input_o  & \B[0]~input_o )) # (\B[1]~input_o ))) ) ) ) 
// # ( \A[2]~input_o  & ( !\B[2]~input_o  & ( (!\A[1]~input_o  & (\A[0]~input_o  & (\B[0]~input_o  & \B[1]~input_o ))) # (\A[1]~input_o  & (((\A[0]~input_o  & \B[0]~input_o )) # (\B[1]~input_o ))) ) ) )

	.dataa(!\A[0]~input_o ),
	.datab(!\B[0]~input_o ),
	.datac(!\A[1]~input_o ),
	.datad(!\B[1]~input_o ),
	.datae(!\A[2]~input_o ),
	.dataf(!\B[2]~input_o ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\C~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \C~0 .extended_lut = "off";
defparam \C~0 .lut_mask = 64'h0000011F011FFFFF;
defparam \C~0 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \S~2 (
// Equation(s):
// \S~2_combout  = !\A[3]~input_o  $ (!\B[3]~input_o  $ (\C~0_combout ))

	.dataa(!\A[3]~input_o ),
	.datab(!\B[3]~input_o ),
	.datac(!\C~0_combout ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\S~2_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \S~2 .extended_lut = "off";
defparam \S~2 .lut_mask = 64'h6969696969696969;
defparam \S~2 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \C~1 (
// Equation(s):
// \C~1_combout  = (!\A[1]~input_o  & (\A[0]~input_o  & (\B[0]~input_o  & \B[1]~input_o ))) # (\A[1]~input_o  & (((\A[0]~input_o  & \B[0]~input_o )) # (\B[1]~input_o )))

	.dataa(!\A[0]~input_o ),
	.datab(!\B[0]~input_o ),
	.datac(!\A[1]~input_o ),
	.datad(!\B[1]~input_o ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\C~1_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \C~1 .extended_lut = "off";
defparam \C~1 .lut_mask = 64'h011F011F011F011F;
defparam \C~1 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \Cout~0 (
// Equation(s):
// \Cout~0_combout  = ( \B[3]~input_o  & ( ((!\A[2]~input_o  & (\B[2]~input_o  & \C~1_combout )) # (\A[2]~input_o  & ((\C~1_combout ) # (\B[2]~input_o )))) # (\A[3]~input_o ) ) ) # ( !\B[3]~input_o  & ( (\A[3]~input_o  & ((!\A[2]~input_o  & (\B[2]~input_o  & 
// \C~1_combout )) # (\A[2]~input_o  & ((\C~1_combout ) # (\B[2]~input_o ))))) ) )

	.dataa(!\A[2]~input_o ),
	.datab(!\B[2]~input_o ),
	.datac(!\C~1_combout ),
	.datad(!\A[3]~input_o ),
	.datae(!\B[3]~input_o ),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\Cout~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \Cout~0 .extended_lut = "off";
defparam \Cout~0 .lut_mask = 64'h001717FF001717FF;
defparam \Cout~0 .shared_arith = "off";
// synopsys translate_on

assign S[0] = \S[0]~output_o ;

assign S[1] = \S[1]~output_o ;

assign S[2] = \S[2]~output_o ;

assign S[3] = \S[3]~output_o ;

assign Cout = \Cout~output_o ;

endmodule
