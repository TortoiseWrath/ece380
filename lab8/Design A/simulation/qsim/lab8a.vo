// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 16.0.0 Build 211 04/27/2016 SJ Standard Edition"

// DATE "11/01/2016 19:21:51"

// 
// Device: Altera 5CSEMA5F31C6 Package FBGA896
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module lab8a (
	w,
	y,
	z);
input 	[3:0] w;
output 	[1:0] y;
output 	z;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \y[0]~output_o ;
wire \y[1]~output_o ;
wire \z~output_o ;
wire \w[3]~input_o ;
wire \w[1]~input_o ;
wire \w[2]~input_o ;
wire \y~0_combout ;
wire \z~0_combout ;
wire \w[0]~input_o ;
wire \z~1_combout ;


cyclonev_io_obuf \y[0]~output (
	.i(\y~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\y[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \y[0]~output .bus_hold = "false";
defparam \y[0]~output .open_drain_output = "false";
defparam \y[0]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \y[1]~output (
	.i(!\z~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\y[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \y[1]~output .bus_hold = "false";
defparam \y[1]~output .open_drain_output = "false";
defparam \y[1]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \z~output (
	.i(\z~1_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\z~output_o ),
	.obar());
// synopsys translate_off
defparam \z~output .bus_hold = "false";
defparam \z~output .open_drain_output = "false";
defparam \z~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \w[3]~input (
	.i(w[3]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\w[3]~input_o ));
// synopsys translate_off
defparam \w[3]~input .bus_hold = "false";
defparam \w[3]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \w[1]~input (
	.i(w[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\w[1]~input_o ));
// synopsys translate_off
defparam \w[1]~input .bus_hold = "false";
defparam \w[1]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \w[2]~input (
	.i(w[2]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\w[2]~input_o ));
// synopsys translate_off
defparam \w[2]~input .bus_hold = "false";
defparam \w[2]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \y~0 (
// Equation(s):
// \y~0_combout  = ((\w[1]~input_o  & !\w[2]~input_o )) # (\w[3]~input_o )

	.dataa(!\w[3]~input_o ),
	.datab(!\w[1]~input_o ),
	.datac(!\w[2]~input_o ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\y~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \y~0 .extended_lut = "off";
defparam \y~0 .lut_mask = 64'h7575757575757575;
defparam \y~0 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \z~0 (
// Equation(s):
// \z~0_combout  = (!\w[3]~input_o  & !\w[2]~input_o )

	.dataa(!\w[3]~input_o ),
	.datab(!\w[2]~input_o ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\z~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \z~0 .extended_lut = "off";
defparam \z~0 .lut_mask = 64'h8888888888888888;
defparam \z~0 .shared_arith = "off";
// synopsys translate_on

cyclonev_io_ibuf \w[0]~input (
	.i(w[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\w[0]~input_o ));
// synopsys translate_off
defparam \w[0]~input .bus_hold = "false";
defparam \w[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \z~1 (
// Equation(s):
// \z~1_combout  = (((\w[0]~input_o ) # (\w[2]~input_o )) # (\w[1]~input_o )) # (\w[3]~input_o )

	.dataa(!\w[3]~input_o ),
	.datab(!\w[1]~input_o ),
	.datac(!\w[2]~input_o ),
	.datad(!\w[0]~input_o ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\z~1_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \z~1 .extended_lut = "off";
defparam \z~1 .lut_mask = 64'h7FFF7FFF7FFF7FFF;
defparam \z~1 .shared_arith = "off";
// synopsys translate_on

assign y[0] = \y[0]~output_o ;

assign y[1] = \y[1]~output_o ;

assign z = \z~output_o ;

endmodule
