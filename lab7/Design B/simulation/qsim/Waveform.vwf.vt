// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/25/2016 18:27:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab7b
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab7b_vlg_sample_tst(
	x0,
	x1,
	x2,
	x3,
	sampler_tx
);
input  x0;
input  x1;
input  x2;
input  x3;
output sampler_tx;

reg sample;
time current_time;
always @(x0 or x1 or x2 or x3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab7b_vlg_check_tst (
	f1,
	f2,
	sampler_rx
);
input  f1;
input  f2;
input sampler_rx;

reg  f1_expected;
reg  f2_expected;

reg  f1_prev;
reg  f2_prev;

reg  f1_expected_prev;
reg  f2_expected_prev;

reg  last_f1_exp;
reg  last_f2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	f1_prev = f1;
	f2_prev = f2;
end

// update expected /o prevs

always @(trigger)
begin
	f1_expected_prev = f1_expected;
	f2_expected_prev = f2_expected;
end



// expected f1
initial
begin
	f1_expected = 1'bX;
end 

// expected f2
initial
begin
	f2_expected = 1'bX;
end 
// generate trigger
always @(f1_expected or f1 or f2_expected or f2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected f1 = %b | expected f2 = %b | ",f1_expected_prev,f2_expected_prev);
	$display("| real f1 = %b | real f2 = %b | ",f1_prev,f2_prev);
`endif
	if (
		( f1_expected_prev !== 1'bx ) && ( f1_prev !== f1_expected_prev )
		&& ((f1_expected_prev !== last_f1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f1_expected_prev);
		$display ("     Real value = %b", f1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f1_exp = f1_expected_prev;
	end
	if (
		( f2_expected_prev !== 1'bx ) && ( f2_prev !== f2_expected_prev )
		&& ((f2_expected_prev !== last_f2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f2_expected_prev);
		$display ("     Real value = %b", f2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f2_exp = f2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#80000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab7b_vlg_vec_tst();
// constants                                           
// general purpose registers
reg x0;
reg x1;
reg x2;
reg x3;
// wires                                               
wire f1;
wire f2;

wire sampler;                             

// assign statements (if any)                          
lab7b i1 (
// port map - connection between master ports and signals/registers   
	.f1(f1),
	.f2(f2),
	.x0(x0),
	.x1(x1),
	.x2(x2),
	.x3(x3)
);

// x3
always
begin
	x3 = 1'b0;
	x3 = #40000 1'b1;
	#40000;
end 

// x2
always
begin
	x2 = 1'b0;
	x2 = #20000 1'b1;
	#20000;
end 

// x1
always
begin
	x1 = 1'b0;
	x1 = #10000 1'b1;
	#10000;
end 

// x0
always
begin
	x0 = 1'b0;
	x0 = #5000 1'b1;
	#5000;
end 

lab7b_vlg_sample_tst tb_sample (
	.x0(x0),
	.x1(x1),
	.x2(x2),
	.x3(x3),
	.sampler_tx(sampler)
);

lab7b_vlg_check_tst tb_out(
	.f1(f1),
	.f2(f2),
	.sampler_rx(sampler)
);
endmodule

